{"version":3,"sources":["src/classes/Point.js","src/config.js","src/util.js","third_party/perlin.js","src/classes/Heatmap.js","src/classes/Collision.js","src/classes/Road.js","src/classes/SegmentFactory.js","src/classes/Segment.js","src/classes/QuadTree.js","src/generation.js","src/draw.js","src/index.js"],"names":["Point","x","y","Math","sqrt","length2","other","v","minus","length","s","radians","acos","dot","PI","scalarMultiply","start","end","toStart","line","projected","project","result","add","sign","distance2","pointOnLine","lineProj2","DEFAULT_SEGMENT_WIDTH","HIGHWAY_SEGMENT_WIDTH","DEFAULT_SEGMENT_LENGTH","HIGHWAY_SEGMENT_LENGTH","SEGMENT_COUNT_LIMIT","BRANCH_ANGLE","FORWARD_ANGLE","HIGHWAY_BRANCH_PROBABILITY","DEFAULT_BRANCH_PROBABILITY","HIGHWAY_BRANCH_POPULATION_THRESHOLD","NORMAL_BRANCH_POPULATION_THRESHOLD","ROAD_SNAP_DISTANCE","MINIMUM_INTERSECTION_DEVIATION","MIN_SPEED_PROPORTION","NORMAL_BRANCH_TIME_DELAY_FROM_HIGHWAY","QUADTREE_MAX_OBJECTS","QUADTREE_MAX_LEVELS","randomRange","min","max","random","minDegreeDifference","a","b","diff","abs","randomAngle","limit","nonUniformNorm","pow","value","minAndIndex","array","min_i","forEach","entry","i","maxAndIndex","max_i","Grad","z","grad3","p","perm","Array","gradP","seed","floor","F2","G2","F3","G3","simplex2","xin","yin","n0","n1","n2","j","t","x0","y0","i1","j1","x1","y1","x2","y2","gi0","gi1","gi2","t0","dot2","t1","t2","Heatmap","one","noise","two","three","road","populationAt","Collision","RECT","LINE","CIRCLE","object","type","properties","collisionRevision","limitsRevision","undefined","cachedLimits","prop","axis","minCorner","corners","corner","maxCorner","Type","minX","minY","width","height","center","radius","limits","otherLimits","rectCircleCollision","rectRectIntersection","circle","rectPropsFromLine","distanceToLine","axes","center0","center2","projections","dots","direction","perpendicular","halfWidth","rect","cornersA","cornersB","overlaps","projectionsA","map","projectionsB","positionsA","vector","positionsB","util","maxA","maxA_i","minA","minA_i","maxB","maxB_i","minB","minB_i","maxAminB","maxBminA","push","minVector","Road","segment","collider","updateCollisionProperties","roadRevision","SegmentFactory","time","params","Segment","sin","cos","START","END","highway","directionRevision","lengthRevision","cachedDirection","cachedLength","links","backwards","forwards","users","maxSpeed","capacity","vertical","cross","angle","distance","equals","currentSpeed","fromFraction","segmentEnd","endContaining","fraction","End","cost","concat","startIsBackwards","includes","point","segments","tree","splitPart","fromExisting","addSegment","setEnd","setStart","slice","firstSplit","secondSplit","fixLinks","link","index","indexOf","insert","QuadTree","bounds","maxObjects","maxLevels","level","objects","nodes","round","midpointX","midpointY","top","bottom","getIndex","subdivide","splice","retrieve","node","clear","doRoadSegmentsIntersect","intersectX","intersectY","localConstraints","debugData","action","priority","matches","match","intersection","actions","function","split","severed","intersections","duplicates","some","linksForEndContaining","snaps","intersectionsRadius","globalGoals","previousSegment","newBranches","template","usingDirection","templateContinue","templateBranch","continueStraight","straightPop","popOnRoad","randomStraight","randomPop","roadPop","leftHighwayBranch","rightHighwayBranch","leftBranch","rightBranch","branch","setUpBranchLinks","generate","queue","rootSegment","oppositeDirection","newEnd","treeParams","minT","minT_i","minSegment","accepted","id","drawSegment","context","strokeStyle","lineWidth","beginPath","moveTo","lineTo","closePath","stroke","canvas","document","getElementById","getContext","window","innerWidth","innerHeight","addEventListener","event","clearRect","generator","draw"],"mappings":"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","file":"src.a2b27638.map","sourceRoot":"..","sourcesContent":["export default class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  length() {\n    return Math.sqrt(this.length2());\n  }\n\n  length2() {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  distance(other) {\n    const v = other.minus(this);\n    return v.length();\n  }\n\n  distance2(other) {\n    const v = other.minus(this);\n    return v.length2();\n  }\n\n  equals(other) {\n    return this.x === other.x && this.y === other.y;\n  }\n\n  scalarMultiply(s) {\n    return new Point(this.x * s, this.y * s);\n  }\n\n  add(other) {\n    return new Point(this.x + other.x, this.y + other.y);\n  }\n\n  minus(other) {\n    return new Point(this.x - other.x, this.y - other.y);\n  }\n\n  dot(other) {\n    return this.x * other.x + this.y * other.y;\n  }\n\n  cross(other) {\n    return this.x * other.y - this.y * other.x;\n  }\n\n  angle(other) {\n    const radians = Math.acos(this.dot(other) / (this.length() * other.length()));\n    return radians * 180 / Math.PI;\n  }\n\n  project(other) {\n    return other.scalarMultiply(this.dot(other) / other.length());\n  }\n\n  distanceToLine(start, end) {\n    const toStart = this.minus(start);\n    const line = end.minus(start);\n    const projected = toStart.project(line);\n    const result = start.add(projected);\n    const dot = toStart.dot(line);\n    const sign = dot < 0 ? -1 : dot > 0 ? 1 : 0;\n\n    return {\n      distance2: result.distance2(this),\n      pointOnLine: result,\n      // distance along line of projected point\n      lineProj2:  sign * projected.length2(),\n      length2: line.length2()\n    }\n  }\n}\n","export const DEFAULT_SEGMENT_WIDTH = 1;\nexport const HIGHWAY_SEGMENT_WIDTH = 2;\nexport const DEFAULT_SEGMENT_LENGTH = 30;\nexport const HIGHWAY_SEGMENT_LENGTH = 40;\nexport const SEGMENT_COUNT_LIMIT = 500;\n\nexport const BRANCH_ANGLE = 3; // in degrees\nexport const FORWARD_ANGLE = 15; // in degrees\n\nexport const HIGHWAY_BRANCH_PROBABILITY = 0.05;\nexport const DEFAULT_BRANCH_PROBABILITY = 0.4;\n\nexport const HIGHWAY_BRANCH_POPULATION_THRESHOLD = 0.1;\nexport const NORMAL_BRANCH_POPULATION_THRESHOLD = 0.1;\n\nexport const ROAD_SNAP_DISTANCE = 500;\nexport const MINIMUM_INTERSECTION_DEVIATION = 30; // in degrees\n\nexport const MIN_SPEED_PROPORTION = 0.1;\nexport const NORMAL_BRANCH_TIME_DELAY_FROM_HIGHWAY = 5;\n\nexport const QUADTREE_MAX_OBJECTS = 10;\nexport const QUADTREE_MAX_LEVELS = 10;\n","function randomRange(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nexport function minDegreeDifference(a, b) {\n  const diff = Math.abs(a - b) % 180;\n  return Math.min(diff, Math.abs(diff - 180));\n}\n\nexport function randomAngle(limit) {\n  const nonUniformNorm = Math.pow(Math.abs(limit), 3);\n  let value = 0;\n  while (value === 0 || Math.random() < Math.pow(Math.abs(value), 3) / nonUniformNorm) {\n    value = randomRange(-limit, +limit);\n  }\n  return value;\n}\n\nexport function minAndIndex(array) {\n  let min = array[0];\n  let min_i = 0;\n  array.forEach((entry, i) => {\n    if (entry < min) {\n      min = entry;\n      min_i = i;\n    }\n  });\n  return [min, min_i];\n}\n\nexport function maxAndIndex(array) {\n  let max = array[0];\n  let max_i = 0;\n  array.forEach((entry, i) => {\n    if (entry > max) {\n      max = entry;\n      max_i = i;\n    }\n  });\n  return [max, max_i];\n}\n","/*\n * Adapted from https://github.com/josephg/noisejs\n */\n\nclass Grad {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  dot2(x, y) {\n    return this.x * x + this.y * y;\n  }\n}\n\nconst grad3 = [\n  new Grad(1,1,0),new Grad(-1,1,0),new Grad(1,-1,0),new Grad(-1,-1,0),\n  new Grad(1,0,1),new Grad(-1,0,1),new Grad(1,0,-1),new Grad(-1,0,-1),\n  new Grad(0,1,1),new Grad(0,-1,1),new Grad(0,1,-1),new Grad(0,-1,-1)\n];\n\nconst p = [151,160,137,91,90,15,\n131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,\n190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\n88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,\n77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\n102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,\n135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,\n5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\n223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,\n129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,\n251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,\n49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,\n138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];\nconst perm = new Array(512);\nconst gradP = new Array(512);\n\nexport function seed(seed) {\n  if (seed > 0 && seed < 1) {\n    // Scale the seed out\n    seed *= 65536;\n  }\n\n  seed = Math.floor(seed);\n  if (seed < 256) {\n    seed |= seed << 8;\n  }\n\n  for (let i = 0; i < 256; i++) {\n    const v = i & 1 ? p[i] ^ (seed & 255) : p[i] ^ ((seed>>8) & 255);\n    perm[i] = perm[i + 256] = v;\n    gradP[i] = gradP[i + 256] = grad3[v % 12];\n  }\n}\n\nseed(0);\n\n// Skewing and unskewing factors for 2, 3, and 4 dimensions\nconst F2 = 0.5 * (Math.sqrt(3) - 1);\nconst G2 = (3 - Math.sqrt(3)) / 6;\n\nconst F3 = 1 / 3;\nconst G3 = 1 / 6;\n\n// 2D simplex noise\nexport function simplex2(xin, yin) {\n  let n0, n1, n2; // Noise contributions from the three corners\n  // Skew the input space to determine which simplex cell we're in\n  const s = (xin + yin) * F2; // Hairy factor for 2D\n  let i = Math.floor(xin + s);\n  let j = Math.floor(yin + s);\n  const t = (i + j) * G2;\n  const x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n  const y0 = yin - j + t;\n  // For the 2D case, the simplex shape is an equilateral triangle.\n  // Determine which simplex we are in.\n  // Offsets for second (middle) corner of simplex in (i,j) coords\n  const i1 = x0 > y0 ? 1 : 0;\n  const j1 = x0 > y0 ? 0 : 1;\n  // x0 > y0 is lower triangle, XY order: (0,0)->(1,0)->(1,1)\n  // otherwise is upper triangle, YX order: (0,0)->(0,1)->(1,1)\n  // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n  // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n  // c = (3-sqrt(3))/6\n  const x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n  const y1 = y0 - j1 + G2;\n  const x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n  const y2 = y0 - 1 + 2 * G2;\n  // Work out the hashed gradient indices of the three simplex corners\n  i &= 255;\n  j &= 255;\n  const gi0 = gradP[i + perm[j]];\n  const gi1 = gradP[i + i1 + perm[j + j1]];\n  const gi2 = gradP[i + 1 + perm[j + 1]];\n  // Calculate the contribution from the three corners\n  let t0 = 0.5 - x0 * x0 - y0 * y0;\n  if (t0 < 0) {\n    n0 = 0;\n  } else {\n    t0 *= t0;\n    n0 = t0 * t0 * gi0.dot2(x0, y0);  // (x,y) of grad3 used for 2D gradient\n  }\n  let t1 = 0.5 - x1 * x1 - y1 * y1;\n  if(t1 < 0) {\n    n1 = 0;\n  } else {\n    t1 *= t1;\n    n1 = t1 * t1 * gi1.dot2(x1, y1);\n  }\n  let t2 = 0.5 - x2 * x2 - y2 * y2;\n  if (t2 < 0) {\n    n2 = 0;\n  } else {\n    t2 *= t2;\n    n2 = t2 * t2 * gi2.dot2(x2, y2);\n  }\n  // Add contributions from each corner to get the final noise value.\n  // The result is scaled to return values in the interval [-1,1].\n  return 70 * (n0 + n1 + n2);\n}\n","import * as noise from './../../third_party/perlin.js';\n\nexport default class Heatmap {\n  static populationAt(x, y) {\n    const one = (noise.simplex2(x / 20000, y / 10000) + 1) / 2;\n    const two = (noise.simplex2(x / 20000 + 500, y / 20000 + 500) + 1) / 2;\n    const three = (noise.simplex2(x / 10000 + 1000, y / 20000 + 1000) + 1) / 2;\n    return Math.pow((one * two + three) / 2, 2);\n  }\n\n  static popOnRoad(road) {\n    return (this.populationAt(road.start.x, road.start.y) + this.populationAt(road.end.x, road.end.y)) / 2;\n  }\n}\n","import Point from './Point.js';\n\nexport default class Collision {\n  static get Type() {\n    return { RECT: 'rect', LINE: 'line', CIRCLE: 'circle' };\n  }\n\n  constructor(object, type, properties) {\n    this.object = object;\n    this.type = type;\n    this.properties = properties;\n    this.collisionRevision = 0;\n    this.limitsRevision = undefined;\n    this.cachedLimits = undefined;\n  }\n\n  updateCollisionProperties(properties) {\n    this.collisionRevision++;\n    for (const prop in properties) {\n      this.properties[prop] = properties[prop];\n    }\n  }\n\n  minCorner(axis) {\n    let minCorner = this.properties.corners[0];\n    this.properties.corners.forEach(corner => {\n      if (corner[axis] < minCorner[axis]) minCorner = corner;\n    });\n    return minCorner;\n  }\n\n  maxCorner(axis) {\n    let maxCorner = this.properties.corners[0];\n    this.properties.corners.forEach(corner => {\n      if (corner[axis] > maxCorner[axis]) maxCorner = corner;\n    });\n    return maxCorner;\n  }\n\n  limits() {\n    if (this.collisionRevision !== this.limitsRevision) {\n      this.limitsRevision = this.collisionRevision;\n      if (this.type === Collision.Type.RECT) {\n        minX = this.minCorner('x').x;\n        minY = this.minCorner('y').y;\n        this.cachedLimits = {\n          x: minX,\n          y: minY,\n          width: this.maxCorner('x').x - minX,\n          height: this.maxCorner('y').y - minY,\n          object: this.object\n        }\n      } else if (this.type === Collision.Type.LINE) {\n        this.cachedLimits = {\n          x: Math.min(this.properties.start.x, this.properties.end.x),\n          y: Math.min(this.properties.start.y, this.properties.end.y),\n          width: Math.abs(this.properties.start.x - this.properties.end.x),\n          height: Math.abs(this.properties.start.y - this.properties.end.y),\n          object: this.object\n        }\n      } else if (this.type === Collision.Type.CIRCLE) {\n        this.cachedLimits = {\n          x: this.properties.center.x - this.properties.radius,\n          y: this.properties.center.y - this.properties.radius,\n          width: this.properties.radius * 2,\n          height: this.properties.radius * 2,\n          object: this.object\n        }\n      }\n    }\n    return this.cachedLimits;\n  }\n\n  collide(other) {\n    // avoid expensive collision check if possible\n    const limits = this.limits();\n    const otherLimits = other.limits();\n    if (limits && otherLimits &&\n        (limits.x + limits.width < otherLimits.x || otherLimits.x + otherLimits.width < limits.x) &&\n        (limits.y + limits.height < otherLimits.y || otherLimits.y + otherLimits.height < limits.y)) {\n      return false;\n    }\n\n    if (this.type === Collision.Type.CIRCLE) {\n      if (other.type === Collision.Type.RECT) {\n        other.rectCircleCollision(this);\n      }\n    } else if (this.type === Collision.Type.RECT) {\n      if (other.type !== Collision.Type.CIRCLE) {\n        this.rectRectIntersection(other);\n      } else {\n        this.rectCircleCollision(other);\n      }\n    } else if (this.type === Collision.Type.LINE) {\n      if (other.type !== Collision.Type.CIRCLE) {\n        this.rectRectIntersection(other);\n      }\n    }\n  }\n\n  rectCircleCollision(circle) {\n    // this must be a rectangle or line to call this function\n    if (this.type === Collision.Type.CIRCLE) return;\n    // other must be a circle to call this function\n    if (circle.type !== Collision.Type.CIRCLE) return;\n\n    // get the correct properties\n    const properties = this.type === Collision.Type.LINE ? this.rectPropsFromLine() : this.properties;\n    const corners = properties.corners;\n    const radius = circle.properties.radius;\n\n    // check for corner intersections with circle\n    for (const corner of corners) {\n      if (corner.distance2(circle.properties.center) <= radius * radius) {\n        return true;\n      }\n\n      // check for edge intersections with circle\n      for (let i = 0; i < corners.length; i++) {\n        const start = corners[i];\n        const end = corners[(i + 1) % corners.length];\n        const {distance2, pointOnLine, lineProj2, length2} = circle.properties.center.distanceToLine(start, end);\n        if (lineProj2 > 0 && lineProj2 < length2 && distance2 <= radius * radius) {\n          return true;\n        }\n      }\n\n      // check that the circle is not enclosed by the rectangle\n      const axes = [corners[3].minus(corners[0]), corners[3].minus(corners[2])];\n      const center0 = circle.properties.center.minus(corners[0]);\n      const center2 = circle.properties.center.minus(corners[2]);\n      const projections = [center0.project(axes[0]), center2.project(axes[1])];\n      const dots = [center0.dot(axes[0]), center2.dot(axes[1])];\n      if (dots[0] < 0 || projections[0].length2() > axes[0].length2() ||\n          dots[1] < 0 || projections[1].length2() > axes[1].length2()) {\n        return false;\n      }\n      return true;\n    }\n  }\n\n  rectPropsFromLine() {\n    // this must be a line to call this function\n    if (this.type !== Collision.Type.LINE) return;\n\n    const direction = this.properties.end.minus(this.properties.start);\n    const perpendicular = new Point(-direction.y, direction.x);\n    const halfWidth = perpendicular.scalarMultiply(0.5 * this.properties.width / perpendicular.length());\n    return {\n      corners: [\n        this.properties.start.add(halfWidth),\n        this.properties.start.minus(halfWidth),\n        this.properties.end.minus(halfWidth),\n        this.properties.end.add(halfWidth)\n      ]\n    }\n  }\n\n  rectRectIntersection(rect) {\n    // this must be a rectangle or line to call this function\n    if (this.type === Collision.Type.CIRCLE) return;\n    // other must be a rectangle or line to call this function\n    if (rect.type === Collision.Type.CIRCLE) return;\n\n    const cornersA = this.type === Collision.Type.LINE ? this.rectPropsFromLine().corners : this.properties.corners;\n    const cornersB = rect.type === Collision.Type.LINE ? rect.rectPropsFromLine().corners : rect.properties.corners;\n    const axes = [\n      cornersA[3].minus(cornersA[0]),\n      cornersA[3].minus(cornersA[2]),\n      cornersB[0].minus(cornersB[1]),\n      cornersB[0].minus(cornersB[3])\n    ]\n\n    // find axes with overlaps\n    const overlaps = [];\n    for (const axis of axes) {\n      const projectionsA = cornersA.map(corner => corner.project(axis));\n      const projectionsB = cornersB.map(corner => corner.project(axis));\n\n      const positionsA = projectionsA.map(vector => vector.dot(axis));\n      const positionsB = projectionsB.map(vector => vector.dot(axis));\n\n      const [maxA, maxA_i] = util.maxAndIndex(positionsA);\n      const [minA, minA_i] = util.minAndIndex(positionsA);\n      const [maxB, maxB_i] = util.maxAndIndex(positionsB);\n      const [minB, minB_i] = util.minAndIndex(positionsB);\n\n      // if the rectangles don't overlaps on at least one axis, they don't collide\n      if (maxA < minB || maxB < minA) {\n        return false;\n      } else {\n        // calculate the overlap between the rectangles on this axis\n        const maxAminB = projectionsA[maxA_i].minus(projectionsB[minB_i]);\n        const maxBminA = projectionsB[maxB_i].minus(projectionsA[minA_i]);\n        if (maxAminB.length2() < maxBminA.length2()) overlaps.push(maxAminB);\n        // the rectangles overlap on the other side, so invert the vector\n        else overlaps.push(maxBminA.scalarMultiply(-1));\n      }\n    }\n\n    // find axis with the least overlap\n    let minVector = overlaps[0];\n    overlaps.forEach(vector => {\n      if (vector.length2() < minVector.length2()) minVector = vector;\n    });\n\n    // return displacement required to remove the rectangle from the collision\n    return minVector.scalarMultiply(-1);\n  }\n}\n","export default class Road {\n  constructor(start, end, segment) {\n    this.start = start;\n    this.end = end;\n    this.segment = segment;\n  }\n\n  setStart(start) {\n    this.start = start;\n    this.segment.collider.updateCollisionProperties({ start: start });\n    this.segment.roadRevision++;\n  }\n\n  setEnd(end) {\n    this.end = end;\n    this.segment.collider.updateCollisionProperties({ end: end });\n    this.segment.roadRevision++;\n  }\n}\n","import Segment from './Segment.js';\nimport Point from './Point.js';\n\nexport default class SegmentFactory {\n  static fromExisting(segment, time, road, params) {\n    time = time || segment.time;\n    road = road || segment.road;\n    params = params || segment.params;\n    return new Segment(road.start, road.end, time, params);\n  }\n\n  static usingDirection(start, direction = 90, length = DEFAULT_SEGMENT_LENGTH, time = 0, params = {}) {\n    // convert direction to radians\n    direction *= Math.PI / 180;\n    const x = start.x + length * Math.sin(direction);\n    const y = start.y + length * Math.cos(direction);\n    return new Segment(start, new Point(x, y), time, params);\n  }\n}\n","import { DEFAULT_SEGMENT_WIDTH,\n         HIGHWAY_SEGMENT_WIDTH,\n         MIN_SPEED_PROPORTION } from './../config.js';\n\nimport Collision from './Collision.js';\nimport Road from './Road.js';\nimport Point from './Point.js';\nimport SegmentFactory from './SegmentFactory.js';\n\nexport default class Segment {\n  static get End() {\n    return { START: 'start', END: 'end' };\n  }\n\n  constructor(start, end, time = 0, params = {}) {\n    this.start = start;\n    this.end = end;\n    this.time = time;\n    this.params = params;\n\n    this.width = params.highway ? HIGHWAY_SEGMENT_WIDTH : DEFAULT_SEGMENT_WIDTH;\n    this.collider = new Collision(this, Collision.Type.LINE, {start: start, end: end, width: this.width});\n\n    this.roadRevision = 0;\n    this.directionRevision = undefined;\n    this.lengthRevision = undefined;\n\n    this.cachedDirection = undefined;\n    this.cachedLength = undefined;\n\n    this.road = new Road(start, end, this);\n\n    // time-step delay before this road is evaluated\n    this.time = time;\n    // meta-information relevant to global goals\n    this.params = params;\n\n    this.links = { backwards: [], forwards: [] };\n\n    this.users = [];\n    this.maxSpeed = params.highway ? 1200 : 800;\n    this.capacity = params.highway ? 12 : 6;\n  }\n\n  currentSpeed() {\n    return Math.min(MIN_SPEED_PROPORTION, 1 - Math.max(0, this.users.length - 1) / this.capacity) * this.maxSpeed;\n  }\n\n  direction() {\n    if (this.directionRevision !== this.roadRevision) {\n      this.directionRevision = this.roadRevision;\n      const vertical = new Point(0, 1);\n      const vector = this.road.end.minus(this.road.start);\n      const cross = vertical.cross(vector);\n      // we want the opposite of the cross sign\n      const sign = cross > 0 ? -1 : cross < 0 ? 1 : 0;\n      this.cachedDirection = sign * vertical.angle(vector);\n    }\n    return this.cachedDirection;\n  }\n\n  length() {\n    if (this.lengthRevision !== this.roadRevision) {\n      this.lengthRevision = this.roadRevision;\n      this.cachedLength = this.road.start.distance(this.road.end);\n    }\n    return this.cachedLength;\n  }\n\n  startIsBackwards() {\n    if (this.links.backwards.length) {\n      return this.links.backwards[0].road.start.equals(this.road.start) ||\n             this.links.backwards[0].road.end.equals(this.road.start);\n    } else {\n      return this.links.forwards[0].road.start.equals(this.road.end) ||\n             this.links.forwards[0].road.end.equals(this.road.end);\n    }\n  }\n\n  cost() {\n    return this.length() / this.currentSpeed();\n  }\n\n  costTo(other, fromFraction) {\n    const segmentEnd = this.endContaining(other);\n    const fraction = fromFraction ? (segmentEnd === Segment.End.START ? fromFraction : fromFraction) : 0.5;\n    return this.cost() * fraction;\n  }\n\n  neighbors() {\n    return this.links.forwards.concat(this.links.backwards);\n  }\n\n  endContaining(segment) {\n    const backwards = this.startIsBackwards();\n    if (this.links.backwards.includes(segment)) {\n      return backwards ? Segment.End.START : Segment.End.END;\n    } else if (this.links.forwards.includes(segment)) {\n      return backwards ? Segment.End.END : Segment.End.START;\n    } else {\n      return undefined;\n    }\n  }\n\n  linksForEndContaining(segment) {\n    if (this.links.backwards.includes(segment)) {\n      return this.links.backwards;\n    } else if (this.links.forwards.includes(segment)) {\n      return this.links.forwards;\n    } else {\n      return undefined;\n    }\n  }\n\n  split(point, segment, segments, tree) {\n    const backwards = this.startIsBackwards();\n\n    const splitPart = SegmentFactory.fromExisting(this);\n    splitPart.addSegment(segments, tree);\n    splitPart.road.setEnd(point);\n    this.road.setStart(point);\n\n    splitPart.links.backwards = this.links.backwards.slice(0);\n    splitPart.links.forwards = this.links.forwards.slice(0);\n\n    // determine which links correspond to which end of the split segment\n    const firstSplit = backwards ? splitPart : this;\n    const secondSplit = backwards ? this : splitPart;\n    const fixLinks = backwards ? splitPart.links.backwards : splitPart.links.forwards;\n\n    fixLinks.forEach(link => {\n      let index = link.links.backwards.indexOf(this);\n      if (index !== -1) {\n        link.links.backwards[index] = splitPart;\n      } else {\n        index = link.links.forwards.indexOf(this);\n        link.links.forwards[index] = splitPart;\n      }\n    });\n\n    firstSplit.links.forwards = [segment, secondSplit];\n    secondSplit.links.backwards = [segment, firstSplit];\n\n    segment.links.forwards.push(firstSplit);\n    segment.links.forwards.push(secondSplit);\n  }\n\n  addSegment(segments, tree) {\n    segments.push(this);\n    tree.insert(this.collider.limits());\n  }\n}\n","export default class QuadTree {\n  constructor(bounds, maxObjects = 10, maxLevels = 4, level = 0) {\n    this.bounds = bounds;\n    this.maxObjects = maxObjects;\n    this.maxLevels = maxLevels;\n    this.level = level;\n\n    this.objects = [];\n    this.nodes = [];\n  }\n\n  subdivide() {\n    const width = Math.round(this.bounds.width / 2);\n    const height = Math.round(this.bounds.height / 2);\n    const x = Math.round(this.bounds.x);\n    const y = Math.round(this.bounds.y);\n\n    // top right node\n    this.nodes[0] = new QuadTree({\n      x: x + width,\n      y: y,\n      width: width,\n      height: height\n    }, this.maxObjects, this.maxLevels, this.level + 1);\n\n    // top left node\n    this.nodes[1] = new QuadTree({\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    }, this.maxObjects, this.maxLevels, this.level + 1);\n\n    // bottom left node\n    this.nodes[2] = new QuadTree({\n      x: x,\n      y: y + height,\n      width: width,\n      height: height\n    }, this.maxObjects, this.maxLevels, this.level + 1);\n\n    // bottom right node\n    this.nodes[3] = new QuadTree({\n      x: x + width,\n      y: y + height,\n      width: width,\n      height: height\n    }, this.maxObjects, this.maxLevels, this.level + 1);\n  }\n\n  // determines which node the given rectangle is in\n  getIndex(rect) {\n    let index = -1;\n    const midpointX = this.bounds.x + this.bounds.width / 2;\n    const midpointY = this.bounds.y + this.bounds.height / 2;\n\n    const top = rect.y < midpointY && rect.y + rect.height < midpointY;\n    const bottom = rect.y > midpointY;\n\n    if (rect.x < midpointX && rect.x + rect.width < midpointX) {\n      index = top ? 1 : bottom ? 2 : index;\n    } else if (rect.x > midpointX) {\n      index = top ? 0 : bottom ? 3 : index;\n    }\n    return index;\n  }\n\n  insert(rect) {\n    if (this.nodes.length) {\n      const i = this.getIndex(rect);\n      if (i !== -1) return this.nodes[i].insert(rect);\n    }\n\n    this.objects.push(rect);\n\n    if (this.objects.length > this.maxObjects && this.level < this.maxLevels) {\n      if (this.nodes.length === 0) this.subdivide();\n\n      let i = 0;\n      while (i < this.objects.length) {\n        const index = this.getIndex(this.objects[i]);\n        if (index !== -1) this.nodes[index].insert(this.objects.splice(i, 1)[0]);\n        else i++;\n      }\n    }\n  }\n\n  // returns all objects that collide with the given object\n  retrieve(rect) {\n    const index = this.getIndex(rect);\n    let objects = this.objects;\n\n    if (this.nodes.length) {\n      if (index !== -1) {\n        objects = objects.concat(this.nodes[index].retrieve(rect));\n      } else {\n        // check against all subnodes\n        for (const node of this.nodes) {\n          objects = objects.concat(node.retrieve(rect));\n        }\n      }\n    }\n    return objects;\n  }\n\n  clear() {\n    this.objects = [];\n    for (const node of this.nodes) {\n      node.clear();\n    }\n  }\n}\n","import { ROAD_SNAP_DISTANCE,\n         MINIMUM_INTERSECTION_DEVIATION,\n         DEFAULT_SEGMENT_LENGTH,\n         HIGHWAY_SEGMENT_LENGTH,\n         NORMAL_BRANCH_TIME_DELAY_FROM_HIGHWAY,\n         BRANCH_ANGLE, FORWARD_ANGLE,\n         HIGHWAY_BRANCH_POPULATION_THRESHOLD,\n         NORMAL_BRANCH_POPULATION_THRESHOLD,\n         HIGHWAY_BRANCH_PROBABILITY,\n         DEFAULT_BRANCH_PROBABILITY,\n         QUADTREE_PARAMS, QUADTREE_MAX_OBJECTS, QUADTREE_MAX_LEVELS,\n         SEGMENT_COUNT_LIMIT } from './config.js';\nimport * as util from './util.js';\nimport * as noise from './../third_party/perlin.js';\n\nimport Point from './classes/Point.js';\nimport Heatmap from './classes/Heatmap.js';\nimport Segment from './classes/Segment.js';\nimport QuadTree from './classes/QuadTree.js';\nimport SegmentFactory from './classes/SegmentFactory.js';\n\nfunction doRoadSegmentsIntersect(a, b) {\n  let intersectX = false;\n  for (let i = a.start.x; i < a.end.x; i++) {\n    if (i > b.start.x && i < b.end.x) {\n      intersectX = true;\n      break;\n    }\n  }\n  let intersectY = false;\n  for (let i = a.start.y; i < a.end.y; i++) {\n    if (i > b.start.y && i < b.end.y) {\n      intersectY = true;\n      break;\n    }\n  }\n  return intersectX && intersectY;\n}\n\nfunction localConstraints(segment, segments, tree, debugData) {\n  const action = { priority: 0, params: {} };\n\n  const matches = tree.retrieve(segment.collider.limits());\n  for (const match of matches) {\n    const other = match.object;\n\n    // intersection check\n    if (action.priority < 5) {\n      const intersection = doRoadSegmentsIntersect(segment.road, other.road);\n      if (intersection) {\n        if (!action.params.time || intersection.time < actions.params.time) {\n          action.params.time = intersection.time;\n\n          action.priority = 4;\n          return action.function = () => {\n            // if intersecting lines are too similar don't continue\n            if (util.minDegreeDifference(other.direction(), segment.direction()) < MINIMUM_INTERSECTION_DEVIATION) {\n              return false;\n            }\n\n            other.split(intersection, segment, segments, tree);\n            segment.road.end = intersection;\n            segmentEnd.params.severed = true;\n\n            if (debugData) {\n              debugData.intersections = debugData.intersections || [];\n              debugData.intersections.push(new Point(intersection.x, intersection.y));\n            }\n\n            return true;\n          }\n        }\n      }\n    }\n\n    // snap to crossing within radius check\n    if (action.priority < 4) {\n      // current segment's start must have been checked to have been created\n      // other segment's start must have a corresponding end\n      if (segment.road.end.distance(other.road.end) <= ROAD_SNAP_DISTANCE) {\n        const point = other.road.end;\n        action.priority = 3;\n        return action.function = () => {\n          segment.road.end = point;\n          segment.params.severed = true;\n\n          // update other's links corresponding to other.road.end\n          const links = other.startIsBackwards() ? other.links.forwards : other.links.backwards;\n\n          // check for duplicate lines, don't add if it exists\n          const duplicates = links.some(link => {\n            return (link.road.start.equals(segment.road.end) && link.road.end.equals(segment.road.start)) ||\n              (link.road.start.equals(segment.road.start) && link.road.end.equals(segment.road.end));\n          });\n          if (duplicates) return false;\n\n          links.forEach(link => {\n            // pick links of remaining segments at junction corresponding to other.road.end\n            link.linksForEndContaining(other).push(segment);\n\n            // add junction segments to snapped segment\n            segment.links.forwards.push(link);\n          });\n\n          links.push(segment);\n          segment.links.forwards.push(other);\n\n          if (debugData) {\n            debugData.snaps = debugData.snaps || [];\n            debugData.snaps.push(new Point(point.x, point.y));\n          }\n\n          return true;\n        }\n      }\n    }\n\n    // intersection with radius check\n    if (action.priority < 3) {\n      const { distance2, pointOnLine, lineProj2, length2 } =\n        segment.road.end.distanceToLine(other.road.start, other.road.end);\n      if (distance2 < ROAD_SNAP_DISTANCE * ROAD_SNAP_DISTANCE && lineProj2 >= 0 && lineProj2 <= length2) {\n        const point = pointOnLine;\n        action.priority = 2;\n        return action.function = () => {\n          segment.road.end = point;\n          segment.params.severed = true;\n\n          // if intersecting lines are too similar don't continue\n          if (util.minDegreeDifference(other.direction(), segment.direction() < MINIMUM_INTERSECTION_DEVIATION)) {\n            return false;\n          }\n\n          other.split(point, segment, segments, tree);\n\n          if (debugData) {\n            debugData.intersectionsRadius = debugData.intersectionsRadius || [];\n            debugData.intersectionsRadius.push(new Point(point.x, point.y));\n          }\n\n          return true;\n        }\n      }\n    }\n  }\n\n  if (action.function) return action.function();\n  return true;\n}\n\nfunction globalGoals(previousSegment) {\n  const newBranches = [];\n  if (!previousSegment.params.severed) {\n    const template = (direction, length, time, params) => SegmentFactory.usingDirection(previousSegment.road.end, direction, length, time, params);\n\n    // used for highways or going straight on a normal branch\n    const templateContinue = (direction) => template(direction, previousSegment.length(), 0, previousSegment.params);\n\n    // not using params, i.e. not highways\n    const templateBranch = (direction) => template(direction, DEFAULT_SEGMENT_LENGTH, previousSegment.params.highway ? NORMAL_BRANCH_TIME_DELAY_FROM_HIGHWAY : 0);\n\n    const continueStraight = templateContinue(previousSegment.direction());\n    const straightPop = Heatmap.popOnRoad(continueStraight.road);\n\n    if (previousSegment.params.highway) {\n      const randomStraight = templateContinue(previousSegment.direction() + util.randomAngle(FORWARD_ANGLE));\n      const randomPop = Heatmap.popOnRoad(randomStraight.road);\n      const roadPop = randomPop > straightPop ? randomPop : straightPop;\n      newBranches.push(randomPop > straightPop ? randomStraight : continueStraight);\n\n      if (roadPop > HIGHWAY_BRANCH_POPULATION_THRESHOLD) {\n        if (Math.random() < HIGHWAY_BRANCH_PROBABILITY) {\n          const leftHighwayBranch = templateContinue(previousSegment.direction() - 90 + util.randomAngle(BRANCH_ANGLE));\n          newBranches.push(leftHighwayBranch);\n        } else if (Math.random() < HIGHWAY_BRANCH_PROBABILITY) {\n          const rightHighwayBranch = templateContinue(previousSegment.direction() + 90 + util.randomAngle(BRANCH_ANGLE));\n          newBranches.push(rightHighwayBranch);\n        }\n      }\n    } else if (straightPop > NORMAL_BRANCH_POPULATION_THRESHOLD) {\n      newBranches.push(continueStraight);\n    }\n\n    if (straightPop > NORMAL_BRANCH_POPULATION_THRESHOLD) {\n      if (Math.random() < DEFAULT_BRANCH_PROBABILITY) {\n        const leftBranch = templateBranch(previousSegment.direction() - 90 + util.randomAngle(BRANCH_ANGLE));\n        newBranches.push(leftBranch);\n      } else if (Math.random() < DEFAULT_BRANCH_PROBABILITY) {\n        const rightBranch = templateBranch(previousSegment.direction() + 90 + util.randomAngle(BRANCH_ANGLE));\n        newBranches.push(rightBranch);\n      }\n    }\n  }\n\n  for (const branch of newBranches) {\n    branch.setUpBranchLinks = () => {\n      // set up links between each current branch and each existing branch stemming from the previous segment\n      previousSegment.links.forwards.forEach(link => {\n        branch.links.backwards.push(link);\n        link.linksForEndContaining(previousSegment).push(branch);\n      });\n\n      previousSegment.links.forwards.push(branch);\n      branch.links.backwards.push(previousSegment);\n    }\n  }\n\n  return newBranches;\n}\n\nexport function generate(seed) {\n  const debugData = {};\n  // TODO: change this to use seed data from user input\n  noise.seed(Math.random());\n\n  const queue = [];\n  const rootSegment = new Segment(seed, new Point(seed.x + HIGHWAY_SEGMENT_LENGTH, seed.y), 0, { highway: true });\n  const oppositeDirection = SegmentFactory.fromExisting(rootSegment);\n  const newEnd = new Point(rootSegment.road.start.x - HIGHWAY_SEGMENT_LENGTH, oppositeDirection.road.end.y);\n  oppositeDirection.road.end = newEnd;\n  oppositeDirection.links.backwards.push(rootSegment);\n  rootSegment.links.backwards.push(oppositeDirection);\n  queue.push(rootSegment);\n  queue.push(oppositeDirection);\n\n  const segments = [];\n  // TODO: bounds should be the bounding box of the polygon\n  // maxObjects should vary based on the type of city area\n  const treeParams = { x: seed.x, y: seed.y, width: HIGHWAY_SEGMENT_LENGTH, height: HIGHWAY_SEGMENT_LENGTH };\n  const tree = new QuadTree(treeParams, QUADTREE_MAX_OBJECTS, QUADTREE_MAX_LEVELS);\n\n  while (queue.length && segments.length < SEGMENT_COUNT_LIMIT) {\n    // pop smallest r(ti, ri, qi) from Q (i.e. smallest time)\n    let minT = undefined;\n    let minT_i = 0;\n    queue.forEach((segment, i) => {\n      if (!minT || segment.time < minT) {\n        minT = segment.time;\n        minT_i = i;\n      }\n    });\n\n    const minSegment = queue.splice(minT_i, 1)[0];\n    const accepted = localConstraints(minSegment, segments, tree, debugData);\n    if (accepted) {\n      if (minSegment.setUpBranchLinks) {\n        minSegment.setUpBranchLinks();\n      }\n      minSegment.addSegment(segments, tree);\n      globalGoals(minSegment).forEach(segment => {\n        segment.time += minSegment.time + 1;\n        queue.push(segment);\n      });\n    }\n  }\n\n  let id = 0;\n  for (const segment of segments) {\n    segment.id = id++;\n  }\n\n  return segments;\n}\n","export function drawSegment(context, segment) {\n  context.strokeStyle = segment.params.highway ? '#FF0000' : '#000000';\n  context.lineWidth = segment.width;\n\n  context.beginPath();\n  context.moveTo(segment.road.start.x, segment.road.start.y);\n  context.lineTo(segment.road.end.x, segment.road.end.y);\n  context.closePath();\n  context.stroke();\n}\n","import Point from './classes/Point.js';\nimport * as generator from './generation.js';\nimport * as draw from './draw.js';\n\nconst canvas = document.getElementById('canvas');\nconst context = canvas.getContext('2d');\ncanvas.width = window.innerWidth * 0.85; // canvas is 85vw\ncanvas.height = window.innerHeight;\n\ndocument.getElementById('generate').addEventListener('click', event => {\n  context.clearRect(0, 0, canvas.width, canvas.height);\n  // seed is the point at which the highway starts\n  const seed = new Point(canvas.width / 2, canvas.height / 2);\n  const segments = generator.generate(seed);\n  segments.forEach(segment => draw.drawSegment(context, segment));\n});\n"]}